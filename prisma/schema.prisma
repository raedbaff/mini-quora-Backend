// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
enum Role {
  USER
  ADMIN
}
enum Tag {
  TECHNOLOGY
  PROGRAMMING
  SCIENCE
  HEALTH
  EDUCATION
  BUSINESS
  FINANCE
  SPORTS
  ENTERTAINMENT
  LIFESTYLE
  TRAVEL
  FOOD
  HISTORY
  POLITICS
  PHILOSOPHY
  RELIGION
  ART
  BOOKS
  MUSIC
  MOVIES
  GAMING
  RELATIONSHIPS
  CAREER
  SELF_IMPROVEMENT
  STARTUPS
  LAW
  ENVIRONMENT
  RANDOM
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  username     String?
  password String
  role     Role     @default(USER)
  profilePic String?
  level    Int      @default(1)
  isBanned Boolean  @default(false)
  banExpiresAt DateTime?
  banReason String?
  questions Question[]
  answers   Answer[]
  upvotes   Upvote[]
  downvotes DownVote[]
  replies   Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Question {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  answers     Answer[]
  upvotes     Upvote[]
  downvotes   DownVote[]
  tags       Tag[]
  numberOfAnswers Int @default(0)
  numberOfUpvotes Int @default(0)
  numberOfDownvotes Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}
model Answer {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  description String
  user        User     @relation(fields: [userId], references: [id]) 
  userId      String   @db.ObjectId
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String   @db.ObjectId
  upvotes     Upvote[]
  downvotes   DownVote[]
  replies     Reply[]
  numberOfUpvotes Int @default(0)
  numberOfDownvotes Int @default(0)
  numberOfReplies Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Upvote {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  String   @db.ObjectId
  question  Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model DownVote {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  String   @db.ObjectId
  question  Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Reply {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  description String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
